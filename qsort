#include <iostream>
using namespace std;

int Med(int *M, int a, int b, int c){
//Функция возвращает медиану трех чисел 
	if (M[a] >= M[b] && M[b] >= M[c])
		return b;
	if (M[a] >= M[c] && M[c] >= M[b])
		return c;
	if (M[b] >= M[a] && M[a] >= M[c])
		return a;
	if (M[b] >= M[c] && M[c] >= M[a])
		return c;
	if (M[c]  >= M[b] && M[b] >= M[a])
		return b;
	if (M[c] >= M[a] && M[a] >= M[b])
		return a;

}

void swap(int&a, int&b){
//Функция меняет местами значения переменных
	int c = a;
	a = b;
	b = c;
}

void InsertSort(int *M, int first , int last){
//стандартный алгоритм сортировки вставками
	for (int i = first; i <= last; i++)
	{//обход массива от первого элемента до последнего
		int temp = M[i];
		int j = i - 1;
		while (j >= 0 && M[j] > temp)
		{/*перемещение элемента влево до тех пор, пока он не будет больше левого соседа */
			M[j + 1] = M[j];
			j--;
		}
		M[j + 1] = temp;
	}
}

void quickSort(int *a, int l, int r)
{//рекурсивный алгоритм быстрой сортировки
 	if (r - l < 4){
/*если сортируемый массив состоит менее чем из трех элементов, 
Используется сортировка вставками*/
		InsertSort(a, l, r);
	}
	else{
		
		swap(a[l + (r - l) / 2], a[Med(a, l, r, (l + (r - l) / 2))]);
//середина подмассива меняется местами с медианой начала, конца и середины
		int x = a[l + (r - l) / 2];
//опорный элемент — новая середина подмассива
		int i = l;

		int j = r;

		while (i <= j)//цикл обходит массив с двух сторон
		{
			while (a[i] < x) i++;//поиск слева элемента больше Х
			while (a[j] > x) j--;//поиск справа элемента меньше Х
			if (i <= j)//если они уже не на своем месте
			{
				swap(a[i], a[j]);//свап найденных элементов
				i++;
				j--;
			}
		}
		if (i < r){
			quickSort(a, i, r); //сортировка правого подмассива
		}
		if (l < j)
			quickSort(a, l, j); //сортировка левого подмассива
	}
}

int main()
{
	
	int n;
	cin >> n;
	int*a = new int[n];

	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	quickSort(a, 0, n - 1);
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << " ";
	}
	return 0;
}
